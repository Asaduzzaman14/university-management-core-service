// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model AcademicSemester {
  id                    String                 @id @default(uuid())
  year                  Int
  title                 String
  code                  String
  startMonth            String
  endMonth              String
  createdAt             DateTime               @default(now())
  updatedAt             DateTime               @default(now())
  students              Student[]
  semesterRegistrations SemesterRegistration[]

  @@map("academic_semesters")
}

model AcademicFaculty {
  id        String   @id @default(uuid())
  title     String
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  academicDepartments AcademicDepartment[]
  students            Student[]
  facultys            Faculty[]

  @@map("academic_faculty")
}

model AcademicDepartment {
  id        String   @id @default(uuid())
  title     String
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  academicFacultyId String
  academicFaculty   AcademicFaculty @relation(fields: [academicFacultyId], references: [id])

  students       Student[]
  facultys       Faculty[]
  offeredCourses OfferedCourse[]

  @@map("academic_department")
}

model Student {
  id           String   @id @default(uuid())
  studentId    String
  firstName    String
  lastName     String
  middleName   String
  profileImage String
  email        String
  contactNo    String
  gender       String
  bloodGroup   String
  createdAt    DateTime @default(now())
  updatedAt    DateTime @default(now())

  academicSemester   AcademicSemester @relation(fields: [academicSemesterId], references: [id])
  academicSemesterId String

  academicDepartment   AcademicDepartment @relation(fields: [academicDepartmentId], references: [id])
  academicDepartmentId String

  academicfaculty   AcademicFaculty @relation(fields: [academicFacultyId], references: [id])
  academicFacultyId String

  @@map("students")
}

model Faculty {
  id           String   @id @default(uuid())
  facultyId    String
  firstName    String
  lastName     String
  middleName   String
  profileImage String
  email        String
  contactNo    String
  gender       String
  bloodGroup   String
  designation  String
  createdAt    DateTime @default(now())
  updatedAt    DateTime @default(now())

  academicDepartmentId String
  academicDepartment   AcademicDepartment @relation(fields: [academicDepartmentId], references: [id])

  academicFacultyId String
  academicFaculty   AcademicFaculty @relation(fields: [academicFacultyId], references: [id])
  courses           CourseFaculty[]

  @@map("faculties")
}

model Building {
  id    String @id @default(uuid())
  title String

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  rooms Room[]

  @@map("buildings")
}

model Room {
  id         String   @id @default(uuid())
  roomNumber String
  floor      String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  building   Building @relation(fields: [buildingId], references: [id])
  buildingId String

  @@map("rooms")
}

model Course {
  id        String   @id @default(uuid())
  title     String
  code      String
  credits   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  preRequisite    CourseToPrerequisite[] @relation("CourseToPrerequisite")
  preRequisiteFor CourseToPrerequisite[] @relation("PrerequisiteToCourse")
  facultys        CourseFaculty[]
  offeredCourses  OfferedCourse[]

  @@map("courses")
}

model CourseToPrerequisite {
  courseId       String
  preRequisiteId String

  course       Course @relation(fields: [courseId], references: [id], name: "CourseToPrerequisite")
  preRequisite Course @relation(fields: [preRequisiteId], references: [id], name: "PrerequisiteToCourse")

  @@id([courseId, preRequisiteId])
}

model CourseFaculty {
  courseId String
  course   Course @relation(fields: [courseId], references: [id])

  facultyId String
  faculty   Faculty @relation(fields: [facultyId], references: [id])

  @@id([courseId, facultyId])
  @@map("course_faculty")
}

model SemesterRegistration {
  id        String                      @id @default(uuid())
  startDate DateTime
  endDate   DateTime
  status    SemesterRegistrationStatus? @default(UPCOMING)
  minCredit Int                         @default(0)
  maxCredit Int                         @default(0)
  createdAt DateTime                    @default(now())
  updatedAt DateTime                    @updatedAt

  academicSemesterId    String
  academicSemester      AcademicSemester       @relation(fields: [academicSemesterId], references: [id])
  offeredCourses        OfferedCourse[]
  offeredCourseSections OfferedCourseSection[]

  @@map("semester_registrations")
}

model OfferedCourse {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  courseId String
  course   Course @relation(fields: [courseId], references: [id])

  academicDepartmentId String
  academicDepartment   AcademicDepartment @relation(fields: [academicDepartmentId], references: [id])

  semesterRegistrationId String
  semesterRegistration   SemesterRegistration   @relation(fields: [semesterRegistrationId], references: [id])
  offeredCourseSections  OfferedCourseSection[]

  @@map("offered_courses")
}

model OfferedCourseSection {
  id                       String   @id @default(uuid())
  title                    String
  maxCapacity              Int
  currentlyEnrolledStudent Int      @default(0)
  createdAt                DateTime @default(now())
  updatedAt                DateTime @updatedAt

  offeredCourseId String
  offeredCourse   OfferedCourse @relation(fields: [offeredCourseId], references: [id])

  semesterRegistrationId String
  semesterRegistration   SemesterRegistration @relation(fields: [semesterRegistrationId], references: [id])
}

enum SemesterRegistrationStatus {
  UPCOMING
  ONGOING
  ENDED
}

// npx prisma migrate dev --name changes

// npx prisma studio
